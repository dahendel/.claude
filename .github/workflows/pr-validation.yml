name: PR Validation

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**.md'
      - '.github/workflows/**'
      - 'CLAUDE.md'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install requests beautifulsoup4 markdown-link-check pyyaml

      - name: Run documentation generator check
        id: doc-check
        run: |
          echo "# Documentation Validation Report" > doc-report.md
          echo "" >> doc-report.md
          echo "## Files Changed" >> doc-report.md
          git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.md$' | tee changed-docs.txt || echo "No markdown files changed"

          if [ -s changed-docs.txt ]; then
            echo "### Changed Documentation Files:" >> doc-report.md
            cat changed-docs.txt | sed 's/^/- /' >> doc-report.md
          else
            echo "No markdown files changed in this PR" >> doc-report.md
          fi

      - name: Check documentation consistency
        run: |
          echo "" >> doc-report.md
          echo "## Consistency Checks" >> doc-report.md
          echo "" >> doc-report.md

          # Check for implementation status markers
          echo "### Implementation Status Markers" >> doc-report.md
          if grep -r "\\[ \\]" *.md 2>/dev/null; then
            echo "- ⚠️ Found unchecked items:" >> doc-report.md
            grep -r "\\[ \\]" *.md | head -10 | sed 's/^/  - /' >> doc-report.md
          else
            echo "- ✅ All items are marked complete or in progress" >> doc-report.md
          fi

          # Check for TODO markers
          echo "" >> doc-report.md
          echo "### TODO Items" >> doc-report.md
          if grep -ri "TODO\|FIXME\|XXX" *.md 2>/dev/null; then
            echo "- ⚠️ Found TODO items:" >> doc-report.md
            grep -ri "TODO\|FIXME\|XXX" *.md | head -10 | sed 's/^/  - /' >> doc-report.md
          else
            echo "- ✅ No TODO items found" >> doc-report.md
          fi

          # Check for broken internal references
          echo "" >> doc-report.md
          echo "### Internal References" >> doc-report.md
          BROKEN_REFS=0
          for file in *.md; do
            if [ -f "$file" ]; then
              # Extract file references
              grep -o '\[.*\]([^h].*\.md[^)]*)' "$file" | while read -r ref; do
                ref_file=$(echo "$ref" | sed -n 's/.*(\(.*\)).*/\1/p' | cut -d'#' -f1)
                if [ -n "$ref_file" ] && [ ! -f "$ref_file" ]; then
                  echo "- ⚠️ Broken reference in $file: $ref_file" >> doc-report.md
                  BROKEN_REFS=$((BROKEN_REFS + 1))
                fi
              done
            fi
          done

          if [ $BROKEN_REFS -eq 0 ]; then
            echo "- ✅ All internal references valid" >> doc-report.md
          fi

      - name: Validate markdown formatting
        run: |
          echo "" >> doc-report.md
          echo "## Markdown Formatting" >> doc-report.md
          echo "" >> doc-report.md

          # Check for trailing whitespace
          echo "### Trailing Whitespace" >> doc-report.md
          if grep -n '[[:space:]]$' *.md 2>/dev/null | head -5; then
            echo "- ⚠️ Found trailing whitespace (first 5 occurrences shown above)" >> doc-report.md
          else
            echo "- ✅ No trailing whitespace found" >> doc-report.md
          fi

          # Check for consistent heading format
          echo "" >> doc-report.md
          echo "### Heading Format" >> doc-report.md
          HEADING_ISSUES=$(grep -n '^#[^#[:space:]]' *.md 2>/dev/null | wc -l)
          if [ $HEADING_ISSUES -gt 0 ]; then
            echo "- ⚠️ Found $HEADING_ISSUES headings without space after #" >> doc-report.md
          else
            echo "- ✅ All headings properly formatted" >> doc-report.md
          fi

      - name: Check documentation completeness
        run: |
          echo "" >> doc-report.md
          echo "## Documentation Completeness" >> doc-report.md
          echo "" >> doc-report.md

          # Required files check
          echo "### Required Files" >> doc-report.md
          REQUIRED_FILES=(
            "README.md"
            "CLAUDE.md"
            "EXECUTIVE_SUMMARY.md"
            "IMPLEMENTATION_STATUS.md"
            "QUICK_START_IMPLEMENTATION_GUIDE.md"
            "QUICK_REFERENCE_CARD.md"
          )

          MISSING_FILES=0
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "- ❌ Missing: $file" >> doc-report.md
              MISSING_FILES=$((MISSING_FILES + 1))
            fi
          done

          if [ $MISSING_FILES -eq 0 ]; then
            echo "- ✅ All required documentation files present" >> doc-report.md
          fi

          # Check file sizes (warn if too large)
          echo "" >> doc-report.md
          echo "### Documentation File Sizes" >> doc-report.md
          for file in *.md; do
            if [ -f "$file" ]; then
              SIZE=$(wc -c < "$file")
              SIZE_KB=$((SIZE / 1024))
              if [ $SIZE_KB -gt 200 ]; then
                echo "- ⚠️ Large file: $file (${SIZE_KB}KB)" >> doc-report.md
              fi
            fi
          done
          echo "- ℹ️ Consider splitting files larger than 200KB" >> doc-report.md

      - name: Check for documentation freshness
        run: |
          echo "" >> doc-report.md
          echo "## Documentation Freshness" >> doc-report.md
          echo "" >> doc-report.md

          # Check for outdated dates
          CURRENT_YEAR=$(date +%Y)
          CURRENT_MONTH=$(date +%m)

          echo "### Date References" >> doc-report.md
          OLD_DATES=$(grep -r "202[0-3]" *.md 2>/dev/null | grep -v "Copyright\|License" | wc -l)
          if [ $OLD_DATES -gt 0 ]; then
            echo "- ⚠️ Found $OLD_DATES references to dates before 2024" >> doc-report.md
            echo "- Consider updating to current year: $CURRENT_YEAR" >> doc-report.md
          else
            echo "- ✅ All dates appear current" >> doc-report.md
          fi

          # Check for "Last updated" markers
          echo "" >> doc-report.md
          echo "### Update Timestamps" >> doc-report.md
          FILES_WITH_TIMESTAMP=$(grep -l "Last [Uu]pdated\|Last [Mm]odified\|Date:" *.md 2>/dev/null | wc -l)
          TOTAL_MD_FILES=$(ls -1 *.md 2>/dev/null | wc -l)
          echo "- ℹ️ $FILES_WITH_TIMESTAMP of $TOTAL_MD_FILES files have update timestamps" >> doc-report.md

      - name: Validate code blocks
        run: |
          echo "" >> doc-report.md
          echo "## Code Block Validation" >> doc-report.md
          echo "" >> doc-report.md

          # Check for unclosed code blocks
          echo "### Code Block Syntax" >> doc-report.md
          for file in *.md; do
            if [ -f "$file" ]; then
              BACKTICKS=$(grep -c '^```' "$file" || true)
              if [ $((BACKTICKS % 2)) -ne 0 ]; then
                echo "- ❌ Unclosed code block in $file" >> doc-report.md
              fi
            fi
          done
          echo "- ✅ All code blocks properly closed" >> doc-report.md

          # Check for shell commands with potential issues
          echo "" >> doc-report.md
          echo "### Shell Command Safety" >> doc-report.md
          UNSAFE=$(grep -r 'rm -rf /\|sudo rm\|dd if=' *.md 2>/dev/null | wc -l)
          if [ $UNSAFE -gt 0 ]; then
            echo "- ⚠️ Found $UNSAFE potentially dangerous commands" >> doc-report.md
            echo "- Please review for safety warnings" >> doc-report.md
          else
            echo "- ✅ No obviously dangerous commands found" >> doc-report.md
          fi

      - name: Generate validation summary
        run: |
          echo "" >> doc-report.md
          echo "## Summary" >> doc-report.md
          echo "" >> doc-report.md

          WARNINGS=$(grep -c '⚠️' doc-report.md || true)
          ERRORS=$(grep -c '❌' doc-report.md || true)
          PASSED=$(grep -c '✅' doc-report.md || true)

          echo "- ✅ Checks passed: $PASSED" >> doc-report.md
          echo "- ⚠️ Warnings: $WARNINGS" >> doc-report.md
          echo "- ❌ Errors: $ERRORS" >> doc-report.md
          echo "" >> doc-report.md

          if [ $ERRORS -gt 0 ]; then
            echo "**Status:** ❌ Failed - Please fix errors before merging" >> doc-report.md
            exit 1
          elif [ $WARNINGS -gt 5 ]; then
            echo "**Status:** ⚠️ Warning - Consider addressing warnings" >> doc-report.md
          else
            echo "**Status:** ✅ Passed - Documentation looks good!" >> doc-report.md
          fi

          echo "" >> doc-report.md
          echo "---" >> doc-report.md
          echo "*Generated by GitHub Actions on $(date)*" >> doc-report.md

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: documentation-validation-report
          path: doc-report.md
          retention-days: 30

      - name: Comment PR with validation results
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('doc-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Markdown Lint
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: '**/*.md'
          config: '.markdownlint.json'
        continue-on-error: true

      - name: Create markdownlint report
        if: always()
        run: |
          echo "# Markdown Lint Results" > lint-report.md
          echo "" >> lint-report.md
          echo "See workflow logs for detailed linting results" >> lint-report.md

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: markdown-lint-report
          path: lint-report.md
          retention-days: 30

  link-validation:
    name: Link Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.markdown-link-check.json'
          folder-path: '.'
          file-extension: '.md'
        continue-on-error: true

      - name: Create link check summary
        if: always()
        run: |
          echo "# Link Validation Results" > link-report.md
          echo "" >> link-report.md
          echo "Link validation completed. See workflow logs for details." >> link-report.md

      - name: Upload link report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: link-validation-report
          path: link-report.md
          retention-days: 30

  size-check:
    name: Repository Size Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check repository size
        run: |
          echo "# Repository Size Check" > size-report.md
          echo "" >> size-report.md

          # Check overall size
          REPO_SIZE=$(du -sh . | cut -f1)
          echo "## Overall Repository Size: $REPO_SIZE" >> size-report.md
          echo "" >> size-report.md

          # Check large files
          echo "## Large Files (>1MB)" >> size-report.md
          find . -type f -size +1M -exec ls -lh {} \; | awk '{print "- " $9 " (" $5 ")"}' >> size-report.md || echo "- None found" >> size-report.md
          echo "" >> size-report.md

          # Check documentation size
          DOC_SIZE=$(du -sh *.md 2>/dev/null | awk '{sum+=$1} END {print sum}')
          echo "## Documentation Size" >> size-report.md
          echo "Total markdown files: ${DOC_SIZE}KB" >> size-report.md

          echo "" >> size-report.md
          echo "---" >> size-report.md
          echo "*Tip: Keep documentation concise and consider splitting large files*" >> size-report.md

      - name: Upload size report
        uses: actions/upload-artifact@v4
        with:
          name: size-check-report
          path: size-report.md
          retention-days: 30

  pr-summary:
    name: PR Summary
    needs: [documentation-validation, markdown-lint, link-validation, size-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create combined summary
        run: |
          echo "# Pull Request Validation Summary" > pr-summary.md
          echo "" >> pr-summary.md
          echo "**PR:** #${{ github.event.pull_request.number }}" >> pr-summary.md
          echo "**Author:** @${{ github.event.pull_request.user.login }}" >> pr-summary.md
          echo "**Date:** $(date)" >> pr-summary.md
          echo "" >> pr-summary.md

          echo "## Job Status" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "- Documentation Validation: ${{ needs.documentation-validation.result }}" >> pr-summary.md
          echo "- Markdown Linting: ${{ needs.markdown-lint.result }}" >> pr-summary.md
          echo "- Link Validation: ${{ needs.link-validation.result }}" >> pr-summary.md
          echo "- Size Check: ${{ needs.size-check.result }}" >> pr-summary.md
          echo "" >> pr-summary.md

          echo "## Detailed Reports" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "Download the workflow artifacts to see detailed validation reports." >> pr-summary.md
          echo "" >> pr-summary.md

          # Check if any jobs failed
          if [[ "${{ needs.documentation-validation.result }}" == "failure" ]]; then
            echo "⚠️ **Documentation validation failed!** Please review the errors and fix before merging." >> pr-summary.md
            exit 1
          fi

          echo "✅ **All validation checks passed!**" >> pr-summary.md

      - name: Comment final summary
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('pr-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
